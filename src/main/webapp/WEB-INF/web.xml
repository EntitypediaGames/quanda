<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <display-name>Entitypedia Quanda</display-name>
    <description>Entitypedia Quanda is a sample small open source game, which illustrates very basic Games Framework use</description>

    <!--
        - Key of the system property that should specify the root directory of this
        - web app. Applied by WebAppRootListener or Log4jConfigListener.
    -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>quanda.root</param-value>
    </context-param>

    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:conf/log4j/log4j.properties</param-value>
    </context-param>

    <!--
         - Configures Log4J for this web app.
         - As this context specifies a context-param "log4jConfigLocation", its file path
         - is used to load the Log4J configuration, including periodic refresh checks.
         -
         - Would fall back to default Log4J initialization (non-refreshing) if no special
         - context-params are given.
         -
         - Exports a "web app root key", i.e. a system property that specifies the root
         - directory of this web app, for usage in log file paths.
         - This web app specifies "petclinic.root" (see log4j.properties file).
     -->
    <!-- Leave the listener commented-out if using JBoss -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>


<!--
    &lt;!&ndash; The definition of the Root Spring Container shared by all Servlets and Filters &ndash;&gt;
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/spring/root-context.xml</param-value>
    </context-param>

    &lt;!&ndash; Creates the Spring Container shared by all Servlets and Filters &ndash;&gt;
    &lt;!&ndash; context &ndash;&gt;
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    &lt;!&ndash; web pages &ndash;&gt;
    <servlet>
        <servlet-name>web</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/spring/web-servlet/web-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>web</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    &lt;!&ndash; web api &ndash;&gt;
    <servlet>
        <servlet-name>webapi</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/spring/api-servlet/api-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>webapi</servlet-name>
        <url-pattern>/webapi/*</url-pattern>
    </servlet-mapping>
-->

    <!-- Disables Servlet Container welcome file handling. Needed for compatibility with Servlet 3.0 and Tomcat 7.0 -->
    <welcome-file-list>
        <welcome-file/>
    </welcome-file-list>

    <!--disable for production-->
<!--
    <filter>
        <filter-name>noSessionFilter</filter-name>
        <filter-class>org.entitypedia.games.common.web.filters.NoSessionFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>noSessionFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
-->

    <!--common filter chain - provides anonymous authentication for all-->
<!--
    <filter>
        <filter-name>commonFilterChainProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>commonFilterChainProxy</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
-->

    <!--oauth consumer filter chain: 3-legged, consumer -->
<!--
    <filter>
        <filter-name>oauthFilterChainProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>oauthFilterChainProxy</filter-name>
        <url-pattern>/login</url-pattern>
        <url-pattern>/logout</url-pattern>
    </filter-mapping>
-->

    <!--api filter chain, 2-legged, provider-->
<!--
    <filter>
        <filter-name>apiFilterChainProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>apiFilterChainProxy</filter-name>
        <url-pattern>/webapi/*</url-pattern>
    </filter-mapping>
-->


</web-app>